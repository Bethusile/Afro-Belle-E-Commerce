// <auto-generated />
using System;
using AB.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AB.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250812174133_SeedProducts2")]
    partial class SeedProducts2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AB.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SelectedColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("AB.Models.DiscountCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("DiscountCodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "WELCOME10",
                            DiscountAmount = 10m,
                            IsActive = true,
                            IsPercentage = false
                        },
                        new
                        {
                            Id = 2,
                            Code = "FREESHIP",
                            DiscountAmount = 0m,
                            IsActive = true,
                            IsPercentage = true
                        });
                });

            modelBuilder.Entity("AB.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ShippingFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ShippingOptionId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialInstructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VillageOrSuburb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AB.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Colors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Sizes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("prodQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Bonnets",
                            Colors = "Black, White, Pink, Teal, Navy",
                            Description = "non-elastic",
                            ImageUrl = "~/images/bonnet-pink.jpeg",
                            Name = "Satin Bonnet",
                            Price = 200.00m,
                            Sizes = "S,M,L",
                            prodQuantity = 50
                        },
                        new
                        {
                            Id = 2,
                            Category = "Bonnets",
                            Colors = "Pink, Blue, Grey, Black, White, Pink",
                            Description = "elastic",
                            ImageUrl = "~/images/elastic-champ.jpeg",
                            Name = "Satin Bonnet",
                            Price = 150.00m,
                            Sizes = "S,M,L",
                            prodQuantity = 35
                        },
                        new
                        {
                            Id = 3,
                            Category = "Bonnets",
                            Colors = "Teal, Navy",
                            Description = "non-elastic",
                            ImageUrl = "~/images/bonnet-red.jpeg",
                            Name = "Satin Bonnet",
                            Price = 200.00m,
                            Sizes = "S,M,L",
                            prodQuantity = 3
                        },
                        new
                        {
                            Id = 4,
                            Category = "Scrunchies",
                            Colors = "Gold,Rose,Silver, White, Blue,Pink,Purple",
                            Description = "oversized",
                            ImageUrl = "~/images/scrunchie-pink.jpeg",
                            Name = "Satin Scrunchie",
                            Price = 50.00m,
                            Sizes = "M,L,XL",
                            prodQuantity = 6
                        },
                        new
                        {
                            Id = 5,
                            Category = "Scrunchies",
                            Colors = "Gold,Rose,Silver, White, Blue,Pink,Purple",
                            Description = "one-size",
                            ImageUrl = "~/images/scrunchie-white.jpeg",
                            Name = "Satin Scrunchie",
                            Price = 50.00m,
                            Sizes = "S,M,L",
                            prodQuantity = 75
                        },
                        new
                        {
                            Id = 6,
                            Category = "Scrunchies",
                            Colors = "Gold,Rose,Silver, White, Blue,Pink,Purple",
                            Description = "fun size",
                            ImageUrl = "~/images/scrunchie-red.jpeg",
                            Name = "Satin Scrunchie",
                            Price = 50.00m,
                            Sizes = "M,L,XL",
                            prodQuantity = 90
                        },
                        new
                        {
                            Id = 7,
                            Category = "Pillowcases",
                            Colors = "White",
                            Description = "standard",
                            ImageUrl = "~/images/pillowcase.jpeg",
                            Name = "Satin Pillowcase",
                            Price = 150.00m,
                            Sizes = "Standard,Queen,King",
                            prodQuantity = 40
                        },
                        new
                        {
                            Id = 8,
                            Category = "Pillowcases",
                            Colors = "Champagne",
                            Description = "queen",
                            ImageUrl = "~/images/pillowcase.jpeg",
                            Name = "Satin Pillowcase",
                            Price = 150.00m,
                            Sizes = "Standard,Queen,King",
                            prodQuantity = 30
                        },
                        new
                        {
                            Id = 9,
                            Category = "Pillowcases",
                            Colors = "Black",
                            Description = "king",
                            ImageUrl = "~/images/pillowcase.jpeg",
                            Name = "Satin Pillowcase",
                            Price = 150.00m,
                            Sizes = "Standard,Queen,King",
                            prodQuantity = 25
                        });
                });

            modelBuilder.Entity("AB.Models.ShippingOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvailableRegions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FreeShippingThreshold")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsFreeThresholdEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ShippingOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableRegions = "PE",
                            Cost = 50m,
                            FreeShippingThreshold = 1000m,
                            IsFreeThresholdEnabled = false,
                            Name = "Standard Shipping"
                        },
                        new
                        {
                            Id = 2,
                            AvailableRegions = "PE",
                            Cost = 100m,
                            FreeShippingThreshold = 1000m,
                            IsFreeThresholdEnabled = false,
                            Name = "Express Shipping"
                        },
                        new
                        {
                            Id = 3,
                            AvailableRegions = "PE",
                            Cost = 0m,
                            FreeShippingThreshold = 1000m,
                            IsFreeThresholdEnabled = false,
                            Name = "Free Pickup"
                        });
                });

            modelBuilder.Entity("BankDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceInstructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BankDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountName = "John Doe",
                            AccountNumber = "123456789",
                            AccountType = "Savings",
                            BankName = "FakeBank SA",
                            BranchCode = "250655",
                            ReferenceInstructions = "Use your order ID as the payment reference."
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
